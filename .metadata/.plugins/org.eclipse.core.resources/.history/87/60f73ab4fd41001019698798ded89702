#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_timer.h"
#include "ultrasonic.h"

// Zakładamy, że Timer0_us_Wait jest zdefiniowany gdzieś indziej w projekcie
// i jest wystarczająco precyzyjny.
extern void Timer0_us_Wait(uint32_t us);

// Zmienna SystemCoreClock jest zwykle dostępna globalnie po dołączeniu lpc17xx.h
// i zainicjowaniu systemu (np. w system_LPC17xx.c)
extern uint32_t SystemCoreClock;

static void timer1_for_ultrasonic_init(void) {
    TIM_TIMERCFG_Type TIM_ConfigStruct;
    TIM_MATCHCFG_Type TIM_MatchConfigStruct; // Nie używamy przerwań od match, ale inicjalizacja może być potrzebna

    // 1. Włącz zasilanie dla Timer1 (PCONP[2] = 1)
    LPC_SC->PCONP |= (1 << 2);

    // 2. Skonfiguruj PCLK dla Timer1
    // Ustawmy PCLK_TIMER1 na CCLK (np. 100MHz, jeśli SystemCoreClock = 100MHz)
    // PCLKSEL0, bity 5:4 dla TIMER1 (01 -> CCLK/1, 10 -> CCLK/2, 11 -> CCLK/8, 00 -> CCLK/4)
    // Domyślnie jest CCLK/4. Ustawmy na CCLK/1 dla najwyższej rozdzielczości preskalera.
    LPC_SC->PCLKSEL0 = (LPC_SC->PCLKSEL0 & ~(0x3 << 4)) | (0x01 << 4);

    // Konfiguracja timera
    TIM_ConfigStruct.PrescaleOption = TIM_PRESCALE_USVAL;
    // Aby TC (Timer Counter) inkrementował się co 1µs:
    // PrescaleValue = (PCLK_TIMER1 / 1,000,000) - 1
    // Jeśli PCLK_TIMER1 (po PCLKSEL0) = SystemCoreClock, to:
    TIM_ConfigStruct.PrescaleValue = (SystemCoreClock / 1000000) - 1;

    // Inicjalizacja timera w trybie timera
    TIM_Init(LPC_TIM1, TIM_TIMER_MODE, &TIM_ConfigStruct);

    // Opcjonalnie, jeśli biblioteka tego wymaga, można skonfigurować Match,
    // chociaż nie będziemy go aktywnie używać do generowania przerwań tutaj.
    TIM_MatchConfigStruct.MatchChannel = 0;
    TIM_MatchConfigStruct.IntOnMatch = DISABLE;
    TIM_MatchConfigStruct.StopOnMatch = DISABLE;
    TIM_MatchConfigStruct.ResetOnMatch = DISABLE;
    TIM_MatchConfigStruct.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
    TIM_MatchConfigStruct.MatchValue = 0; // Nieistotne
    TIM_ConfigMatch(LPC_TIM1, &TIM_MatchConfigStruct);

    // Timer zostanie włączony/zresetowany bezpośrednio przed pomiarem
    TIM_Cmd(LPC_TIM1, DISABLE); // Upewnij się, że jest wyłączony na starcie
    TIM_ResetCounter(LPC_TIM1); // Zresetuj licznik
}

void ultrasonic_init(void) {
    PINSEL_CFG_Type PinCfg;

    // Konfiguracja pinu TRIG jako wyjście GPIO
    PinCfg.Funcnum = PINSEL_FUNC_0; // GPIO
    PinCfg.OpenDrain = PINSEL_PINMODE_NORMAL;
    PinCfg.Pinmode = PINSEL_PINMODE_TRISTATE; // Lub PULLDOWN
    PinCfg.Portnum = ULTRASONIC_TRIG_PORT;
    PinCfg.Pinnum = ULTRASONIC_TRIG_PIN;
    PINSEL_ConfigPin(&PinCfg);
    GPIO_SetDir(ULTRASONIC_TRIG_PORT, (1 << ULTRASONIC_TRIG_PIN), 1); // 1 = output
    GPIO_ClearValue(ULTRASONIC_TRIG_PORT, (1 << ULTRASONIC_TRIG_PIN)); // Początkowy stan niski

    // Konfiguracja pinu ECHO jako wejście GPIO (PAMIĘTAJ O DZIELNIKU NAPIĘCIA!)
    PinCfg.Funcnum = PINSEL_FUNC_0; // GPIO
    PinCfg.OpenDrain = PINSEL_PINMODE_NORMAL;
    PinCfg.Pinmode = PINSEL_PINMODE_TRISTATE; // Z dzielnikiem napięcia, pull-up/down nie jest krytyczny
    PinCfg.Portnum = ULTRASONIC_ECHO_PORT;
    PinCfg.Pinnum = ULTRASONIC_ECHO_PIN;
    PINSEL_ConfigPin(&PinCfg);
    GPIO_SetDir(ULTRASONIC_ECHO_PORT, (1 << ULTRASONIC_ECHO_PIN), 0); // 0 = input

    timer1_for_ultrasonic_init();
}

uint32_t ultrasonic_get_distance_cm(void) {
    volatile uint32_t echo_start_time_us = 0;
    volatile uint32_t echo_end_time_us = 0;
    volatile uint32_t echo_duration_us = 0;
    uint32_t distance_cm = 0;
    uint32_t timeout_counter;

    // DEBUG 1: Sprawdź stan ECHO przed wysłaniem TRIG
    uint32_t echo_before = GPIO_ReadValue(ULTRASONIC_ECHO_PORT) & (1 << ULTRASONIC_ECHO_PIN);
    if (echo_before != 0) {
        return 9990; // Debug: ECHO już wysoki przed startem - błąd okablowania
    }

    // DEBUG 2: Wyślij impuls TRIG
    GPIO_SetValue(ULTRASONIC_TRIG_PORT, (1 << ULTRASONIC_TRIG_PIN));
    Timer0_us_Wait(15);
    GPIO_ClearValue(ULTRASONIC_TRIG_PORT, (1 << ULTRASONIC_TRIG_PIN));

    // DEBUG 3: Sprawdź czy ECHO nadal niski po TRIG
    Timer0_us_Wait(10); // Krótka pauza
    uint32_t echo_after_trig = GPIO_ReadValue(ULTRASONIC_ECHO_PORT) & (1 << ULTRASONIC_ECHO_PIN);

    // Przygotuj Timer1
    TIM_ResetCounter(LPC_TIM1);
    TIM_Cmd(LPC_TIM1, ENABLE);

    // DEBUG 4: Czekaj na start ECHO z licznikiem
    timeout_counter = 0;
    while (!(GPIO_ReadValue(ULTRASONIC_ECHO_PORT) & (1 << ULTRASONIC_ECHO_PIN))) {
        timeout_counter++;
        if (timeout_counter > 300000) { // ~30ms timeout
            TIM_Cmd(LPC_TIM1, DISABLE);
            return 8888; // Debug: timeout - ECHO nigdy nie poszedł wysoko
        }
        // Krótka pauza żeby nie zabić procesora
        if (timeout_counter % 1000 == 0) {
            Timer0_us_Wait(1);
        }
    }
    echo_start_time_us = LPC_TIM1->TC;

    // DEBUG 5: Sprawdź czy timer działa
    if (echo_start_time_us == 0) {
        TIM_Cmd(LPC_TIM1, DISABLE);
        return 9991; // Debug: Timer nie działa
    }

    // DEBUG 6: Czekaj na koniec ECHO
    timeout_counter = 0;
    while (GPIO_ReadValue(ULTRASONIC_ECHO_PORT) & (1 << ULTRASONIC_ECHO_PIN)) {
        timeout_counter++;
        if (timeout_counter > 400000) { // ~40ms timeout
            TIM_Cmd(LPC_TIM1, DISABLE);
            return 7777; // Debug: timeout - ECHO za długo wysoki
        }
        if (timeout_counter % 1000 == 0) {
            Timer0_us_Wait(1);
        }
    }
    echo_end_time_us = LPC_TIM1->TC;

    TIM_Cmd(LPC_TIM1, DISABLE);

    // DEBUG 7: Sprawdź czasy
    if (echo_end_time_us <= echo_start_time_us) {
        return 6666; // Debug: nieprawidłowe czasy
    }

    echo_duration_us = echo_end_time_us - echo_start_time_us;

    // DEBUG 8: Sprawdź czy czas ma sens
    if (echo_duration_us < 50) {
        return 5000 + echo_duration_us; // Debug: bardzo krótki czas (zwraca 5000-5049)
    }

    if (echo_duration_us > 50000) {
        return 4000 + (echo_duration_us / 1000); // Debug: bardzo długi czas
    }

    // Normalne obliczenie
    distance_cm = echo_duration_us / 58;

    if (distance_cm < 2) {
        return 3000 + echo_duration_us; // Debug: zwraca surowy czas jeśli < 2cm
    }

    return distance_cm;
}
